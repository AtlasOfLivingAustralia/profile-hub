import grails.util.Environment

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://jaspersoft.jfrog.io/artifactory/third-party-ce-artifacts"}
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
        classpath 'org.grails.plugins:quartz:2.0.13' // Needed to implementation *Job classes
    }
}

version "$profileHubVersion"
group "au.org.ala"
boolean inplace = false // Set to true it needed only for development

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply from: "${project.projectDir}/gradle/publish.gradle"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://jaspersoft.jfrog.io/artifactory/third-party-ce-artifacts"}
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

def httpmimeVersion = "4.4.1"

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.codehaus.groovy:groovy:$groovyVersion"
    implementation ("org.grails.plugins:cache") {
        exclude module: 'groovy'
        exclude module: 'groovy-all'
        exclude module: 'asset-pipeline-grails'
    }
    implementation ("org.grails.plugins:async") {
        exclude module: 'groovy'
        exclude module: 'groovy-all'
    }
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp"

    profile "org.grails.profiles:web"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.3.4"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:4.0.0"

    implementation "org.apache.httpcomponents:httpmime:${httpmimeVersion}"
    implementation "org.apache.httpcomponents:httpcore:${httpmimeVersion}"
    implementation "org.apache.httpcomponents:httpclient:${httpmimeVersion}"

    implementation 'net.sf.ehcache:ehcache:2.8.4'
    implementation 'au.org.ala:image-utils:1.8.2'
    implementation 'org.jsoup:jsoup:1.7.2'
    implementation 'org.apache.tika:tika-parsers:1.3'
    implementation "commons-fileupload:commons-fileupload:1.3.1"

//    implementation 'net.sf.jasperreports:jasperreports:6.4.1'
//    implementation 'net.sf.jasperreports:jasperreports-functions:6.4.1'
//    implementation 'au.org.ala:jasper-liberation-fonts-2.00.1:1.3'
    implementation 'net.glxn:qrgen:1.4'
    implementation 'org.apache.xmlgraphics:batik-bridge:1.9'
    implementation 'org.apache.xmlgraphics:batik-svggen:1.9'
    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20160827.1'
    implementation 'com.google.guava:guava:19.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation "org.apache.httpcomponents:httpcore:${httpmimeVersion}"
    implementation "org.apache.httpcomponents:httpclient:${httpmimeVersion}"
    implementation "org.apache.httpcomponents:httpmime:${httpmimeVersion}"

    implementation 'dk.glasius:external-config:3.0.0'

    implementation "org.grails.plugins:ala-auth:$alaSecurityLibsVersion"
    implementation "org.grails.plugins:ala-ws-security-plugin:$alaSecurityLibsVersion"
    if(!inplace){
        implementation("org.grails.plugins:ala-ws-plugin:$alaSecurityLibsVersion")
    }
    testImplementation "au.org.ala:userdetails-service-client:$alaSecurityLibsVersion"

    implementation 'org.grails.plugins:csv:1.0.1'
    implementation 'net.sf.opencsv:opencsv:2.3'
    implementation("org.grails.plugins:ala-map-plugin:3.0.1")
    implementation 'au.org.ala.grails:interceptor-annotation-matcher:1.0.0'

    implementation "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    implementation("org.grails.plugins:ala-admin-plugin:2.3.0")
    implementation "org.grails.plugins:quartz:2.0.13"
    implementation "org.quartz-scheduler:quartz:2.2.1" // transitive dependency
    //    swagger API
    implementation 'au.org.ala.plugins:openapi:1.1.0'
    runtimeOnly("au.org.ala.plugins.grails:images-client-plugin:1.2")

    runtimeOnly "org.grails.plugins:jquery:1.11.1"
    implementation 'com.bertramlabs.plugins:sass-asset-pipeline:3.2.4'
    assets 'com.bertramlabs.plugins:sass-asset-pipeline:2.14.1'
    assets ("com.craigburke.angular:angular-template-asset-pipeline:2.5.0")
    if (Environment.current == Environment.DEVELOPMENT) {
        implementation "org.grails.plugins:console:1.5.11"
    }

}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        chromedriver {
            version = '2.45.0'
            fallbackTo32Bit = true
        }
        geckodriver '0.30.0'
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}


assets {
    minifyJs = false
    minifyCss = true
    minifyOptions = [
        excludes : ["**/*.min.js", "ckeditor5/build/ckeditor.js", "webjars/swagger-ui/4.5.2/swagger-ui-bundle.js", '**/spec.hintrc.unminified.js', 'spec.hintrc.unminified.js']
    ]
    excludes = ["webjars/leaflet/0.7.7/**/*.*",  "ckeditor5/node_modules/**/*.*", "ckeditor5/src/**/*.*", "ckeditor5/build/ckeditor.js", "ckeditor5/webpack.config.js", '**/spec.hintrc.unminified.js', 'spec.hintrc.unminified.js']
    includes = ["webjars/leaflet/0.7.7/dist/*.*"]
}

bootJar {
    enabled = true
    classifier = 'exec'
    launchScript()
}

tasks.withType(Test) {
    useJUnitPlatform()
}

assemble {
    dependsOn bootJar
}

bootWar {
    enabled = false
}

publish {
    dependsOn assemble
}


//tasks.register('reportCompile') {
//    ant.property(name: 'jasper.path', value: 'jasperreports-6.4.1.jar')

//    ant.taskdef(resource: "com/abc/ant/antlib.xml", classpath: ant.properties['jasper.path'], loaderref: 'abc')


//    println "\n- Starting JasperReports *.jrxml compilation process..."
//    println configurations.runtimeClasspath.asPath
//    // define the Jasper Reports Compile Task
//    ant.taskdef(name:'reportCompile', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.runtimeClasspath.asPath)
//
//    // remove existing jasper files
//    ant.delete{
//        fileset('dir':'grails-app/conf/reports', 'defaultexcludes':'yes'){
//            include('name':'**/*.jasper')
//        }
//    }

    // create a temporary directory for use by the jasper compiler
//    ant.mkdir(dir:'target/jasper')

    // compile the reports
//    ant.reportCompile(srcdir:'grails-app/conf/reports', destdir:'grails-app/conf/reports', tempdir:'target/jasper', keepJava:true, xmlvalidation:true){
//        include(name:'**/*.jrxml')
//        include(classpath: configurations.developmentOnly.asPath)
//        include(name:'**/*.jrtx')
//    }
//    println "-------\n- JasperReports compilation process finished"
//}